# Eternal bash history.
# ---------------------
# Undocumented feature which sets the size to "unlimited".
# http://stackoverflow.com/questions/9457233/unlimited-bash-history
export HISTFILESIZE=
export HISTSIZE=
export HISTTIMEFORMAT="[%F %T] "
# Change the file location because certain bash sessions truncate .bash_history file upon close.
# http://superuser.com/questions/575479/bash-history-truncated-to-500-lines-on-each-login
export HISTFILE=~/.bash_eternal_history

# Force prompt to write history after every command.
# http://superuser.com/questions/20900/bash-history-loss
PROMPT_COMMAND+=" :; history -a; "

export EDITOR=nvim
alias vim=$EDITOR

# We store the original path before we make any changes
# so that sourcing this file can be idempotent.
: "${ORIGINAL_PATH:="$PATH"}"
PATH="$ORIGINAL_PATH"
add_to_path() {
    if [[ "$2" == "prepend" ]]; then
        export PATH="$1:$PATH"
    else
        export PATH="$PATH:$1"
    fi
}
add_to_path "$HOME/bin"                 prepend
add_to_path "$HOME/bin/racket/bin"
add_to_path "$HOME/.cabal/bin"          prepend
add_to_path "$HOME/Library/Haskell/bin" prepend
add_to_path "/opt/google/appengine"     prepend
add_to_path "$HOME/npm/bin"             prepend
add_to_path "$HOME/bin/gradle/bin"

if [[ -d '/home/wchargin/.stack/programs/x86_64-linux/ghc-7.10.3/bin/' ]]; then
    add_to_path '/home/wchargin/.stack/programs/x86_64-linux/ghc-7.10.3/bin/' prepend
fi

if [[ -d '/home/wchargin/google-cloud-sdk' ]]; then
    # The next line updates PATH for the Google Cloud SDK.
    source '/home/wchargin/google-cloud-sdk/path.bash.inc'

    # The next line enables shell command completion for gcloud.
    source '/home/wchargin/google-cloud-sdk/completion.bash.inc'
fi

if [[ -d '/home/wchargin/bash_completions/' ]]; then
    # look how trusting I am
    source /home/wchargin/bash_completions/*
fi

if [[ -d ~/man ]]; then
    export MANPATH=$MANPATH:~/man/
fi

# also note .inputrc contains 'set editing-mode: vi'
set -o vi

bakup () {
    for arg in "$@"; do
        cp --no-clobber "$arg" "${arg}.bak"
    done
}

alias open=xdg-open
alias here="open ."

alias cp="cp -i"
alias mv="mv -i"

# Access schoolwork quickly by class.
# Usage:
#   go <class>
# Example:
#   go stat312
GO="$HOME/Dropbox/school/16"
function go() {
    cd "$GO/$@"
}
function _go() # completion
{
    COMPREPLY=($( compgen -o dirnames -W "$(cat "$GO/current")" -- $2 ))
}
complete -F _go go

# Edit the most recent notes file for this week.
# If no such file exists, edit a new one with today's date.
#
# Usage:
#   notes
#   notes --today
notes() {
    if [[ -d "notes" ]]; then
        cd notes
    fi

    local format='%Y%m%d'
    local prefix="notes_"
    local suffix=".tex"

    local notes_file="${prefix}$(date +"$format")${suffix}"
    local current_day_of_week="$(date +'%w')"   # 1 = Monday; see 'man date'
    local seconds_per_day=86400
    local initial_date="$(date +'%s')"          # current (starting) epoch time
    for i in $(seq 1 "$current_day_of_week"); do
        # i = number of days ago (we count backwards in time)
        local target_date="$(( initial_date - seconds_per_day * (i - 1) ))"
        local infix="$(date --date="@$target_date" +"$format")"
        local candidate_file="${prefix}${infix}${suffix}"
        if [[ -f "$candidate_file" ]]; then
            notes_file="$candidate_file"
            break
        fi
    done

    # Pre-populate a notes template if the file is new.
    # Include a jump marker (<++>) to allow easy cursor positioning.
    if [[ ! -e "$notes_file" ]]; then
        local formatted_date="$(date +'%e %B %Y' | sed -e 's/^ //' -e 's/ /~/')"
        # yes I know what a heredoc is, but this requires less escaping
        {
            echo '\documentclass{article}'
            echo
            echo '\usepackage{wcsetup}'
            echo '\classnotes{'"$formatted_date"'}'
            echo
            echo '\begin{document}'
            echo
            echo '\maketitle'
            echo
            echo '<++>'
            echo
            echo '\end{document}'
        } >> "$notes_file"
    fi
    $EDITOR "$notes_file"
}

# base_PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[01;34m\] \w \$\[\033[00m\]'
PROMPT_COMMAND+='setup_git_vars; '
PS1=
PS1+=$'\n'
PS1+='$(format_exit_code $?)'
PS1+='$(print_git_branch)'
PS1+='$(vim_check)'
PS1+='${debian_chroot:+($debian_chroot)}'
PS1+='\[\033[01;32m\]\u@\h\[\033[01;34m\] \w'
PS1+=$'\n'
PS1+='\$\[\033[00m\] '
vim_check='if env | grep -q '^VIMRUNTIME'; then tput bold; echo -n "[vim|$SHLVL] "; tput sgr0; fi'
format_exit_code() {
    if [[ "$1" -ne 0 ]]; then
        tput bold
        tput setaf 1
        printf '[✕ %3d] ' "$1"
    else
        tput setaf 4
        printf '[✓] '
    fi
    tput sgr0
}
vim_check() {
    if env | grep -q '^VIMRUNTIME'; then
        tput bold
        printf '[vim|%d] ' "$SHLVL"
        tput sgr0
    fi
}
setup_git_vars() {
    if BRANCH="$(git rev-parse --abbrev-ref HEAD 2>&1)"; then
        GIT=1
        FULL_SHA="$(git rev-parse HEAD)"
        SHA="$(<<< "$FULL_SHA" head -c 10)"
        if ! git symbolic-ref HEAD 1>/dev/null 2>&1; then
            DETACHED=1
        else
            DETACHED=0
        fi
    else
        GIT=0
        FULL_SHA=
        SHA=
        DETACHED=
    fi
}
print_git_branch() {
    if [[ "$GIT" -eq 1 ]]; then
        tput bold
        tput setaf 5
        if [[ "$DETACHED" -eq 1 ]]; then
            printf '[%s] ' "$SHA"
        else
            printf '[%s] ' "$BRANCH"
        fi
        tput sgr0
    fi
}

if [[ -f '/home/wchargin/Documents/aufbau/extras/bash_complete/aufbau' ]]; then
    source ~/Documents/aufbau/extras/bash_complete/aufbau
fi

go_to_khan_webapp() {
    [[ $PWD =~ khan/webapp ]] || cd "$HOME/khan/webapp"
}
set_title() {
    # http://askubuntu.com/a/22417
    printf '\033]0;%s\007' "$1"
}
alias kw="go_to_khan_webapp"
alias ds="set_title 'khan/webapp devshell'; go_to_khan_webapp && tools/devshell.py"
alias ms="set_title 'khan/webapp server'; go_to_khan_webapp && make serve"

alias py=python
alias ipy=ipython

alias phab='arc diff HEAD^'
alias rephab='phab -m rebase'

# default: find * -path '*/\.*' -prune -o -type f -print -o -type l -print 2> /dev/null
# we want to ignore node_modules as well
export FZF_DEFAULT_COMMAND='git ls-tree -r --name-only HEAD || find * \( -path '\''*/\.*'\'' -o -path '\''node_modules/*'\'' \) -prune -o -type f -print -o -type l -print 2> /dev/null'
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"

mkcd() {
    mkdir -p "$@" && cd "$@"
}

alias racket='rlwrap racket'
alias sml='rlwrap sml'

vi() {
    # often I write "vi mfile" by mistake
    if [[ "$1" =~ m.* ]]; then
        local first="${1#m}"
        shift
        $EDITOR "$first" "$@"
    else
        $EDITOR "$@"
    fi
}

[ -f ~/.fzf.bash ] && source ~/.fzf.bash

export PATH="$PATH:$HOME/.rvm/bin" # Add RVM to PATH for scripting

s() {
    cd "$HOME/sandbox"
    if [[ $# -gt 0 ]]; then
        mkcd "$@"
    fi
}
_s() { # completion
    COMPREPLY=($( compgen -o dirnames -W "$(cd "$HOME/sandbox/"; find * -maxdepth 0 -type d)" -- $2 ))
}
complete -F _s s

alias h10='hoogle --count=10'

colorgo() {
    gnugo "$@" | runhaskell /home/wchargin/bin/ColorGo.hs
}
